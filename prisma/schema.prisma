generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String       @id @default(uuid())
  name      String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}
model Article {
  id          String      @id @default(uuid())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?
}

model Review {
  id  String @id @default(uuid())
  firstName String 
  secondName String
  image  String?
  role   String?
  company String?
  message  String
  hidden   Boolean @default(true)
}
model Country{
  id String @id @default(uuid())
  name String @unique
  keyfact String
  languages String[]
  size Int
  security String
  population Int
  content String
  images ImageCountry[]
  contentKeyPoints ContentKeyPoint[]
  bookings Booking[]

}
model ImageCountry{
  id Int @id @default(autoincrement())
  image String
  country Country @relation(fields: [countryId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  countryId String
  
}
model ContentKeyPoint{
  id Int @id @default(autoincrement())
  keypoint String
  country Country @relation(fields: [countryId], references: [id],onDelete: Cascade,onUpdate:Cascade)
  countryId String
}

model Booking{
  id String  @id @default(uuid())
  firstName String
  secondName String
  midName String?
  email String
  phone Int?
  messsage String?
  contactPrefered ContactPreference
  placeChosen String[]
  travelingWith Int?
  timeToStart DateTime?
  timeToEnd   DateTime?
  travelAnytime Boolean? @default(false)
  contacted  Boolean @default(false)
  BookedAt DateTime @default(now())
  country Country? @relation(fields: [countryId],references: [id],onDelete: Cascade)
  countryId String
}

enum ContactPreference {
  Email
  Phone
  Both

}

model Conservation {
  id String @id @default(uuid())
  place String @unique
  image String
  date DateTime
  description String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime? 
}